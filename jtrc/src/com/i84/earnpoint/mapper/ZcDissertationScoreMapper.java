package com.i84.earnpoint.mapper;

import java.util.List;
import java.util.Map;

import com.i84.earnpoint.model.ExpertAssignWorkPo;
import com.i84.earnpoint.model.ScoreExportVo;
import com.i84.earnpoint.model.ZcDissertationScore;

public interface ZcDissertationScoreMapper {

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table zc_dissertation_score
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table zc_dissertation_score
     * @mbggenerated
     */
    int insert(ZcDissertationScore record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table zc_dissertation_score
     * @mbggenerated
     */
    int insertSelective(ZcDissertationScore record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table zc_dissertation_score
     * @mbggenerated
     */
    ZcDissertationScore selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table zc_dissertation_score
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(ZcDissertationScore record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table zc_dissertation_score
     * @mbggenerated
     */
    int updateByPrimaryKey(ZcDissertationScore record);

    /**
     * 导出论文鉴定成绩
     * @mbggenerated
     */
    List<ScoreExportVo> exportScoreList(String[] list);

    /**
     * 获取论文鉴定成绩列表
     * @mbggenerated
     */
    List<Map<String,Object>> selectDissertationScoreJDList(Map<String,Object> record);


    List<Map<String,Object>> selectExpertDissertationInfo(Map<String,Object> record);

    /**
     * 查询已经分配任务的专家
     * @param activityId
     * @return
     */
    List<ExpertAssignWorkPo> selectHasAssignTaskExperts(Integer activityId);

    /**
     * 删除所有论文分配的专家，但论文已分配并且专家已登录过的分配无法被删除
     * @param activityId
     * @return
     */
    int deleteAllAssignedExperts(Integer activityId);
    /**
     * 查询某篇论文分配的专家数
     * @param rId
     * @return
     */
    Integer selectAssignCountBylwId(Integer rId);

    /**
     * 删除论文专家分配
     * @param rId
     * @param expertId
     * @return
     */
    int delectDissertationAssign(ZcDissertationScore record);

    /**
     * 获得论文成绩的总和
     * @param rId
     * @return
     */
    Integer selectDissertationScore(Integer rId);

    List<Integer> selectDissertationAssign(Integer rId);

    /**
     * 获得符合重新分配的id
     * @param rId
     * @return
     */
    List<Integer> selectDissertationAssignId(Integer rId);


    /**
     * 再次分配时删除原有的符合再次分配的分配。
     * @param rId
     * @return
     */
    void updateDissertationAssignId(Map<String,List<Integer>> list);

    /**
     * 关闭
     * 
     * @param aid
     * @return
     */
    void cloaseScore(Integer aid);

    List<Map<String, Object>> getAllpaperByActivityId(Integer activityId);

    List<Map<String, Object>> getAllscoreByR_id(Integer rid);

    int getVnum();

    List<ScoreExportVo> exportScoreAllListByAction(String aid);

    List<ScoreExportVo> exportAppraisalByAction(String aid);
}